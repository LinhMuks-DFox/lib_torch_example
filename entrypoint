#!/usr/bin/env python3

import os
import aiohttp
import aiofiles
import asyncio
import zipfile
from tqdm import tqdm
from subprocess import run

# Function to download a file from a URL with progress bar
async def download_file(url, dest):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            total_size = int(response.headers.get('content-length', 0))
            t = tqdm(total=total_size, unit='iB', unit_scale=True)

            async with aiofiles.open(dest, 'wb') as f:
                async for data in response.content.iter_chunked(1024):
                    t.update(len(data))
                    await f.write(data)
            t.close()
    print(f"Downloaded {url} to {dest}")

# Function to unzip a file with progress bar
async def unzip_file(zip_path, extract_to):
    loop = asyncio.get_event_loop()
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_info = zip_ref.infolist()
        total_size = sum([zinfo.file_size for zinfo in zip_info])
        t = tqdm(total=total_size, unit='iB', unit_scale=True)

        for zinfo in zip_info:
            await loop.run_in_executor(None, zip_ref.extract, zinfo, extract_to)
            t.update(zinfo.file_size)
    t.close()
    print(f"Unzipped {zip_path} to {extract_to}")

async def main():
    # Check if libtorch exists
    libtorch_path = "/workspace/libtorch"
    if not os.path.isdir(libtorch_path):
        print("libtorch not found, downloading...")
        libtorch_zip_path = "/workspace/libtorch.zip"
        await download_file("https://download.pytorch.org/libtorch/cu121/libtorch-cxx11-abi-shared-with-deps-2.3.0%2Bcu121.zip", libtorch_zip_path)
        await unzip_file(libtorch_zip_path, "/workspace")
        os.remove(libtorch_zip_path)
    else:
        print("libtorch found, skipping download.")

    # Check if fmt exists
    fmt_path = "/workspace/fmt"
    if not os.path.isdir(fmt_path):
        print("fmt not found, cloning...")
        run(["git", "clone", "https://github.com/fmtlib/fmt.git", fmt_path], check=True)
    else:
        print("fmt found, skipping clone.")

    # Run the default command
    import sys
    run(sys.argv[1:], check=True)

if __name__ == "__main__":
    asyncio.run(main())
